pcall(function()

spawn(function()    
function GetPerkTable()
    _G.PerkTable = nil
    for i,v in pairs(getgc(true)) do
        if type(v) == "table" and rawget(v,"Bld") then
            _G.PerkTable = v
        end
    end
end

GetPerkTable()
    
-- anti client kick

local Player = game.Players.LocalPlayer
local oldnamecall; oldnamecall = hookmetamethod(game, "__namecall", function(self, ...)
  local args = {...}
  local method = getnamecallmethod();
 
  if (method == "Kick" or method == "kick") and self == Player then
      return wait(9e9);
  end
 
  return oldnamecall(self, unpack(args))
end)

-- checks for stats duration

function CheckValue(Name, Value1, Value2, Value3)
    if Name > Value1 or Name < Value2 then
        Name = Value3
    end
end

CheckValue(_G.Bleed, 10, 0, 0)
CheckValue(_G.Expose, 10, 0, 0)
CheckValue(_G.Cripple, 10, 0, 0)
CheckValue(_G.Blind, 10, 0, 0)
CheckValue(_G.Pierce, 10, 0, 0)
CheckValue(_G.Toxin, 10, 0, 0)
CheckValue(_G.Vomit, 10, 0, 0)
CheckValue(_G.Sickness, 10, 0, 0)
CheckValue(_G.Susceptible, 10, 0, 0)
CheckValue(_G.Berserk, 2500, 0, 360)
CheckValue(_G.BloodThirst, 2500, 0, 360)
CheckValue(_G.MuscleMilk, 2500, 0, 250)
CheckValue(_G.Iron4Skin, 2500, 0, 250)
CheckValue(_G.LungButter, 2500, 0, 250)
CheckValue(_G.SpeedyThrusts, 2500, 0, 250)
CheckValue(_G.Regeneration, 2500, 0, 250)
CheckValue(_G.Painkillers, 2500, 0, 250)
CheckValue(_G.Snared, 50, 0, 0)
CheckValue(_G.TrackingBeacon, 2500, 0, 250)
CheckValue(_G.Tinnitus, 50, 0, 0)
CheckValue(_G.Showdown, 50, 0, 20)
CheckValue(_G.Armor, 3000, 0, 1500)


-- dont edit these
local S = require(game:GetService("Workspace").ServerStuff:FindFirstChild("Statistics"):FindFirstChild("S_STATISTICS"))
if _G.timed ~= true then
    _G.timed = true
    
    _G.BldD = S.Bld.dur
    _G.ExpD = S.Exp.dur
    _G.CrpD = S.Crp.dur
    _G.BndD = S.Bnd.dur
    _G.PrcD = S.Prc.dur
    _G.PsnD = S.Psn.dur
    _G.VcdD = S.Vcd.dur
    _G.ScsD = S.Scs.dur
    _G.SusD = S.Sus.dur
    _G.BrzD = S.Brz.dur
    _G.BlsD = S.Bls.dur
    _G.ArmD = S.Arm.dur
    _G.MuscleMilkD = S["Muscle Milk"].dur
    _G.Iron4SkinD = S["Iron 4 Skin"].dur
    _G.LungButterD = S["Lung Butter"].dur
    _G.SpeedyThrustsD = S["Speedy Thrusts"].dur
    _G.RgnD = S.Rgn.dur
    _G.PnkD = S.Pnk.dur
    _G.BsgD = S.Bsg.dur
    _G.SnrD = S.Snr.dur
    _G.BcnD = S.Bcn.dur
    _G.TntD = S.Tnt.dur
    _G.ShdD = S.Shd.dur
end  

-- breaks if its not the first idk why
if _G.AutoParryCall ~= true then
_G.AutoParryCall = true    
spawn(function()

local mt = getrawmetatable(game)
make_writeable(mt)

local namecall = mt.__namecall
mt.__namecall = newcclosure(function(self, ...)
    local method = getnamecallmethod()
    local args = {...}

    if method == "FireServer" and tostring(self) == "initiateblock" then
        if args[2] ~= true then
            if _G.AutoParry then
                args[2] = true
            end    
        end
    end
    return namecall(self, table.unpack(args))
end)

end)
end

end)

function Heal(arg)
    if arg == "One" then
        workspace.ServerStuff.dealDamage:FireServer("Regeneration", nil, _G.Code)
    elseif arg == "Full" then
        for i = 0,(game.Players.LocalPlayer.Character:FindFirstChild("Humanoid").MaxHealth - game.Players.LocalPlayer.Character:FindFirstChild("Humanoid").Health) do
            workspace.ServerStuff.dealDamage:FireServer("Regeneration", nil, _G.Code)
        end
    end
end    

local vomiting = {}

spawn(function()
    while true do task.wait(0.1)
        pcall(function()
            for i,v in pairs(vomiting) do
                workspace.ServerStuff.applyGore:FireServer("vomit", game.Players:FindFirstChild(v).Character)
            end    
        end)    
    end  
end)

if _G.Code ~= getrenv()._G.pseed[getrenv()._G.list[workspace.ServerStuff.ask:InvokeServer("mainHandler", true)]] or _G.Code == nil then
    _G.Code = getrenv()._G.pseed[getrenv()._G.list[workspace.ServerStuff.ask:InvokeServer("mainHandler", true)]]
end 

function DeathStats()
    workspace.ServerStuff.retrieveStats:InvokeServer()
    workspace.ServerStuff.ask:InvokeServer("main", false)
end  

function Respawn()
    workspace.ServerStuff.spawnPlayer:FireServer("respawncharacter")
end 

function NewRespawn()
    if game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("endgamegui") then
        DeathStats()
    end
    Respawn()
end

function Hub()
    workspace.ServerStuff.spawnPlayer:FireServer("hubbing")
end    

if WeaponStats == nil and game.Workspace:FindFirstChild("ServerStuff") and game.Workspace.ServerStuff:FindFirstChild("Statistics") and game.Workspace.ServerStuff.Statistics:FindFirstChild("W_STATISTICS") then
    WeaponStats = require(game.Workspace.ServerStuff.Statistics["W_STATISTICS"])
end

function itemsearch(arg)
    local item
    for i, v in pairs(game:GetService("ReplicatedStorage"):FindFirstChild("Weapons"):GetChildren()) do 
        if string.lower(string.sub(v.Name, 1, string.len(arg))) == string.lower(arg) then
            item = v.Name
    	end
	end
    if item then
    return item
    end
end

function playersearch(arg)
    local item
    for i, v in pairs(game:GetService("Players"):GetPlayers()) do 
        if string.lower(string.sub(v.Name, 1, string.len(arg))) == string.lower(arg) then
            item = v.Name
    	end
	end
    if item then
    return item
    end
end

local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local W1 = OrionLib:MakeWindow({Name = "SOF", HidePremium = false, IntroEnabled = false, SaveConfig = true, ConfigFolder = "SOFSettings"})

OrionLib:MakeNotification({
    Name = "SOF",
    Content = "UseLess Person#7247",
    Image = "rbxassetid://4483345998", --- rbxassetid://4483345998
    Time = 5
})

function notify(name,text)
    OrionLib:MakeNotification({
    Name = name,
    Content = text,
    Image = "rbxassetid://4483345998", --- rbxassetid://4483345998
    Time = 5
})

end

local Toggles = W1:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://4483345998", --- rbxassetid://4483345998
    PremiumOnly = false
})

local Combat = W1:MakeTab({
    Name = "Combat",
    Icon = "rbxassetid://4483345998", --- rbxassetid://4483345998
    PremiumOnly = false
})

local Spawn = W1:MakeTab({
    Name = "Spawner",
    Icon = "rbxassetid://4483345998", --- rbxassetid://4483345998
    PremiumOnly = false
})

local Match = W1:MakeTab({
    Name = "Match Stuff",
    Icon = "rbxassetid://4483345998", --- rbxassetid://4483345998
    PremiumOnly = false
})

local Buff = W1:MakeTab({
    Name = "Perk Stats",
    Icon = "rbxassetid://4483345998", --- rbxassetid://4483345998
    PremiumOnly = false
})

local Misc = W1:MakeTab({
    Name = "Misc.",
    Icon = "rbxassetid://4483345998", --- rbxassetid://4483345998
    PremiumOnly = false
})

Buff:AddParagraph("Stuff","This shit long and i dont see why u would want to atcually edit these (there are gonna be more options in the future)")

Buff:AddButton({
    Name = "Update Perks",
    Callback = function()
        if _G.PerkTable == nil then
            GetPerkTable()
        end
        --rconsolewarn("Working!")
        _G.PerkTable.Bld.dur = _G.Bleed
        _G.PerkTable.Exp.dur = _G.Expose
        _G.PerkTable.Crp.dur = _G.Cripple
        _G.PerkTable.Bnd.dur = _G.Blind
        _G.PerkTable.Prc.dur = _G.Pierce
        _G.PerkTable.Psn.dur = _G.Toxin
        _G.PerkTable.Vcd.dur = _G.Vomit
        _G.PerkTable.Scs.dur = _G.Sickness
        _G.PerkTable.Sus.dur = _G.Susceptible
        _G.PerkTable.Brz.dur = _G.Berserk
        _G.PerkTable.Bls.dur = _G.BloodThirst
        _G.PerkTable.Arm.dur = _G.Armor
        _G.PerkTable["Muscle Milk"].dur = _G.MuscleMilk
        _G.PerkTable["Iron 4 Skin"].dur = _G.Iron4Skin
        _G.PerkTable["Lung Butter"].dur = _G.LungButter
        _G.PerkTable["Speedy Thrusts"].dur = _G.SpeedyThrusts
        _G.PerkTable.Rgn.dur = _G.Regeneration
        _G.PerkTable.Pnk.dur = _G.Painkillers
        _G.PerkTable.Bsg.dur = _G.BlockStagger
        _G.PerkTable.Snr.dur = _G.Snared
        _G.PerkTable.Bcn.dur = _G.TrackingBeacon
        _G.PerkTable.Tnt.dur = _G.Tinnitus
        _G.PerkTable.Shd.dur = _G.Showdown
    end    
})

Buff:AddButton({
    Name = "Reset Perks",
    Callback = function()
        if _G.PerkTable == nil then
            GetPerkTable()
        end
        --rconsolewarn("Working!")
        _G.PerkTable.Bld.dur = _G.BldD
        _G.PerkTable.Exp.dur = _G.ExpD
        _G.PerkTable.Crp.dur = _G.CrpD
        _G.PerkTable.Bnd.dur = _G.BndD
        _G.PerkTable.Prc.dur = _G.PrcD
        _G.PerkTable.Psn.dur = _G.PsnD
        _G.PerkTable.Vcd.dur = _G.VcdD
        _G.PerkTable.Scs.dur = _G.ScsD
        _G.PerkTable.Sus.dur = _G.SusD
        _G.PerkTable.Brz.dur = _G.BrzD
        _G.PerkTable.Bls.dur = _G.BlsD
        _G.PerkTable.Arm.dur = _G.ArmD
        _G.PerkTable["Muscle Milk"].dur = _G.MuscleMilkD
        _G.PerkTable["Iron 4 Skin"].dur = _G.Iron4SkinD
        _G.PerkTable["Lung Butter"].dur = _G.LungButterD
        _G.PerkTable["Speedy Thrusts"].dur = _G.SpeedyThrustsD
        _G.PerkTable.Rgn.dur = _G.RgnD
        _G.PerkTable.Pnk.dur = _G.PnkD
        _G.PerkTable.Bsg.dur = _G.BsgD
        _G.PerkTable.Snr.dur = _G.SnrD
        _G.PerkTable.Bcn.dur = _G.BcnD
        _G.PerkTable.Tnt.dur = _G.TntD
        _G.PerkTable.Shd.dur = _G.ShdD
    end    
})

Buff:AddSlider({
	Name = "Bleed Duration",
	Min = 0,
	Max = 10,
	Default = _G.Bleed,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
	Save = true,
    Flag = "Bleed Duration",
    Callback = function(shit)
        _G.Bleed = tonumber(shit)
    end 
})  

Buff:AddSlider({
	Name = "Expose Duration",
	Min = 0,
	Max = 10,
	Default = _G.Expose,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
	Save = true,
    Flag = "Expose Duration",
    Callback = function(shit)
        _G.Expose = tonumber(shit)
    end 
})

Buff:AddSlider({
	Name = "Cripple Duration",
	Min = 0,
	Max = 10,
	Default = _G.Cripple,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
	Save = true,
    Flag = "Cripple Duration",
    Callback = function(shit)
        _G.Cripple = tonumber(shit)
    end 
})

Buff:AddSlider({
	Name = "Blindness Duration",
	Min = 0,
	Max = 10,
	Default = _G.Blind,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
    Save = true,
    Flag = "Blindness Duration",
    Callback = function(shit)
        _G.Blind = tonumber(shit)
    end 
})

Buff:AddSlider({
	Name = "Pierce Duration",
	Min = 0,
	Max = 10,
	Default = _G.Pierce,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
    Save = true,
    Flag = "Pierce Duration",
    Callback = function(shit)
        _G.Pierce = tonumber(shit)
    end 
})

Buff:AddSlider({
	Name = "Vomit Duration",
	Min = 0,
	Max = 10,
	Default = _G.Vomit,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
	Save = true,
    Flag = "Vomit Duration",
    Callback = function(shit)
        _G.Vomit = tonumber(shit)
    end 
})

Buff:AddSlider({
	Name = "Sickness Duration",
	Min = 0,
	Max = 10,
	Default = _G.Sickness,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
    Save = true,
    Flag = "Sickness Duration",
    Callback = function(shit)
        _G.Sickness = tonumber(shit)
    end 
})

Buff:AddSlider({
	Name = "Toxins Duration",
	Min = 0,
	Max = 10,
	Default = _G.Toxin,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
	Save = true,
    Flag = "Toxins Duration",
    Callback = function(shit)
        _G.Toxin = tonumber(shit)
    end 
})

Buff:AddSlider({
	Name = "Susceptible Duration",
	Min = 0,
	Max = 10,
	Default = _G.Susceptible,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
	Save = true,
    Flag = "Susceptible Duration",
    Callback = function(shit)
        _G.Susceptible = tonumber(shit)
    end 
})

Buff:AddSlider({
	Name = "Armor Duration",
	Min = 0,
	Max = 3000,
	Default = _G.Armor,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
	Save = true,
    Flag = "Armor Duration",
    Callback = function(shit)
        _G.Armor = tonumber(shit)
    end 
})

Buff:AddSlider({
	Name = "Berserk Duration",
	Min = 0,
	Max = 2500,
	Default = _G.Berserk,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
	Save = true,
    Flag = "Berserk Duration",
    Callback = function(shit)
        _G.Berserk = tonumber(shit)
    end 
})

Buff:AddSlider({
	Name = "BloodThirst Duration",
	Min = 0,
	Max = 2500,
	Default = _G.BloodThirst,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
	Save = true,
    Flag = "BloodThirst Duration",
    Callback = function(shit)
        _G.BloodThirst = tonumber(shit)
    end 
})

Buff:AddSlider({
	Name = "MuscleMilk Duration",
	Min = 0,
	Max = 2500,
	Default = _G.MuscleMilk,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
	Save = true,
    Flag = "MuscleMilk Duration",
    Callback = function(shit)
        _G.MuscleMilk = tonumber(shit)
    end 
})

Buff:AddSlider({
	Name = "Iron4Skin Duration",
	Min = 0,
	Max = 2500,
	Default = _G.Iron4Skin,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
	Save = true,
    Flag = "Iron4Skin Duration",
    Callback = function(shit)
        _G.Iron4Skin = tonumber(shit)
    end 
})

Buff:AddSlider({
	Name = "LungButter Duration",
	Min = 0,
	Max = 2500,
	Default = _G.LungButter,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
	Save = true,
    Flag = "LungButter Duration",
    Callback = function(shit)
        _G.LungButter = tonumber(shit)
    end 
})

Buff:AddSlider({
	Name = "Iron4Skin Duration",
	Min = 0,
	Max = 2500,
	Default = _G.Iron4Skin,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
	Save = true,
    Flag = "Iron4Skin Duration",
    Callback = function(shit)
        _G.Iron4Skin = tonumber(shit)
    end 
})

Buff:AddSlider({
	Name = "SpeedyThrusts Duration",
	Min = 0,
	Max = 2500,
	Default = _G.SpeedyThrusts,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
	Save = true,
    Flag = "SpeedyThrusts Duration",
    Callback = function(shit)
        _G.SpeedyThrusts = tonumber(shit)
    end 
})

Buff:AddSlider({
	Name = "Regeneration Duration",
	Min = 0,
	Max = 2500,
	Default = _G.Regeneration,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
	Save = true,
    Flag = "Regeneration Duration",
    Callback = function(shit)
        _G.Regeneration = tonumber(shit)
    end 
})

Buff:AddSlider({
	Name = "Painkillers Duration",
	Min = 0,
	Max = 2500,
	Default = _G.Painkillers,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
	Save = true,
    Flag = "Painkillers Duration",
    Callback = function(shit)
        _G.Painkillers = tonumber(shit)
    end 
})

Buff:AddSlider({
	Name = "BlockStagger Duration",
	Min = 0,
	Max = 5,
	Default = _G.BlockStagger,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
	Save = true,
    Flag = "BlockStagger Duration",
    Callback = function(shit)
        _G.BlockStagger = tonumber(shit)
    end 
})

Buff:AddSlider({
	Name = "Snared Duration",
	Min = 0,
	Max = 50,
	Default = _G.Snared,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
	Save = true,
    Flag = "Snared Duration",
    Callback = function(shit)
        _G.Snared = tonumber(shit)
    end 
})

Buff:AddSlider({
	Name = "TrackingBeacon Duration",
	Min = 0,
	Max = 2500,
	Default = _G.TrackingBeacon,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
	Save = true,
    Flag = "TrackingBeacon Duration",
    Callback = function(shit)
        _G.TrackingBeacon = tonumber(shit)
    end 
})

Buff:AddSlider({
	Name = "Tinnitus Duration",
	Min = 0,
	Max = 50,
	Default = _G.Tinnitus,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
	Save = true,
    Flag = "Tinnitus Duration",
    Callback = function(shit)
        _G.Tinnitus = tonumber(shit)
    end 
})

Buff:AddSlider({
	Name = "Showdown Duration",
	Min = 0,
	Max = 50,
	Default = _G.Showdown,
	Color = Color3.fromRGB(200,200,200),
	Increment = 0.1,
	ValueName = "",
	Save = true,
    Flag = "Showdown Duration",
    Callback = function(shit)
        _G.Showdown = tonumber(shit)
    end 
})

Combat:AddToggle({
    Name = "Inf. Stamina",
    Default = _G.infstam,
    Save = true,
    Flag = "Inf. Stamina",
    Callback = function(shit)
    if shit then
        _G.infstam = true
    else
        _G.infstam = false
        task.wait()
        if InfStamService then
            InfStamService:Disconnect()
        end    
    end 
spawn(function()

-- // Services
local Players = game:GetService("Players")

-- // Vars
local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer.Backpack
local mainHandler = Backpack:WaitForChild("mainHandler")

-- // Find the stat init function
    
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer.Backpack
local mainHandler = Backpack:WaitForChild("mainHandler")

local StatInit
do
    -- // Vars
    local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local Humanoid = Character:WaitForChild("Humanoid")

    -- // Loop through .Changed connections
    for _, Connection in ipairs(getconnections(Humanoid.Changed)) do
        -- // Vars
        local ConnectionFunction = Connection.Function

        -- // Makes sure is mainHandler
        if (getfenv(ConnectionFunction).script == mainHandler) then
            _G.StatInit = debug.getupvalue(ConnectionFunction, 6)
        end
    end
end
if _G.infstam then
local InfStamService = game:GetService("RunService").RenderStepped:Connect(function()
    pcall(function()
        if _G.infstam and game.Players.LocalPlayer.Backpack:FindFirstChild("mainHandler") then
            local Players = game:GetService("Players")
            local LocalPlayer = Players.LocalPlayer
            local Backpack = LocalPlayer.Backpack
            local mainHandler = Backpack:WaitForChild("mainHandler")
            
            local StatInit
            do
                -- // Vars
                local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
                local Humanoid = Character:WaitForChild("Humanoid")
            
                -- // Loop through .Changed connections
                for _, Connection in ipairs(getconnections(Humanoid.Changed)) do
                    -- // Vars
                    local ConnectionFunction = Connection.Function
            
                    -- // Makes sure is mainHandler
                    if (getfenv(ConnectionFunction).script == mainHandler) then
                        _G.StatInit = debug.getupvalue(ConnectionFunction, 6)
                    end
                end
            end
            debug.setupvalue(_G.StatInit, 1, 101)
        else
            InfStamService:Disconnect()
        end    
    end)
end)
end
end)     
end
})

Combat:AddToggle({
    Name = "Simple GodMode",
    Default = _G.SimpleGod,
    Save = true,
    Flag = "Simple GodMode",
    Callback = function(shit)
    if shit then
        _G.SimpleGod = true
    else
        _G.SimpleGod = false
        task.wait(0.5)
        if SimpleGodService then
            SimpleGodService:Disconnect()
        end
    end 
spawn(function()

if _G.Code ~= getrenv()._G.pseed[getrenv()._G.list[workspace.ServerStuff.ask:InvokeServer("mainHandler", true)]] or _G.Code == nil then
    _G.Code = getrenv()._G.pseed[getrenv()._G.list[workspace.ServerStuff.ask:InvokeServer("mainHandler", true)]]
end  

if WeaponStats == nil and game.Workspace:FindFirstChild("ServerStuff") and game.Workspace.ServerStuff:FindFirstChild("Statistics") and game.Workspace.ServerStuff.Statistics:FindFirstChild("W_STATISTICS") then
    WeaponStats = require(game.Workspace.ServerStuff.Statistics["W_STATISTICS"])
end

if _G.SimpleGod then
local SimpleGodService = game:GetService("RunService").Heartbeat:Connect(function()
    pcall(function()
        if _G.SimpleGod and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character.Humanoid.Health ~= 0 and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character.Humanoid.Health ~= game.Players.LocalPlayer.Character.Humanoid.MaxHealth and game.Players.LocalPlayer.Character.Humanoid.MaxHealth < 5000 then
            Heal("Full")
        end    
    end)
end)
else
    if SimpleGodService then
        SimpleGodService:Disconnect()
    end
end    
end)
end
})

function Start(arg)
    if arg == "UnWaired" then
        game.Players.LocalPlayer:FindFirstChild("start").Value = "rayzen"
        game.Players.LocalPlayer:FindFirstChild("start").Value = "commander"
    elseif arg == "Waired" then
        game.Players.LocalPlayer:FindFirstChild("start").Value = "emperor"
        game.Players.LocalPlayer:FindFirstChild("start").Value = "rayzen"
        game.Players.LocalPlayer:FindFirstChild("start").Value = "hubbing"
        game.Players.LocalPlayer:FindFirstChild("start").Value = ""
    elseif arg == "Normal" then
        game.Players.LocalPlayer:FindFirstChild("start").Value = ""
    elseif arg == "Ray" then
        game.Players.LocalPlayer:FindFirstChild("start").Value = "rayzen"
    end    
end

Combat:AddToggle({
    Name = "Anti Shove (Can't drop)",
    Default = _G.AntiShove,
    Save = true,
    Flag = "Anti Shove",
    Callback = function(shit)
    if shit then
        _G.AntiShove = true
        if game:GetService("Workspace").Camera:FindFirstChild("Bottom") and game.Players.LocalPlayer:FindFirstChild("start").Value ~= "commander" then
            Start("UnWaired")
        end    
    else
        _G.AntiShove = false
        wait(0.2)
        Start("Waired")
    end
    
    spawn(function()
        while _G.AntiShove do task.wait(0.1)
            if game:GetService("Workspace").Camera:FindFirstChild("Bottom") and game.Players.LocalPlayer:FindFirstChild("start").Value ~= "commander" then
                wait(3)
                Start("UnWaired")
            end
        end
    end)
                    
end
})

Toggles:AddButton({
    Name = "Equip Juggernaut armor (no music)",
    Callback = function()
        if WeaponStats == nil and game.Workspace:FindFirstChild("ServerStuff") and game.Workspace.ServerStuff:FindFirstChild("Statistics") and game.Workspace.ServerStuff.Statistics:FindFirstChild("W_STATISTICS") then
            WeaponStats = require(game.Workspace.ServerStuff.Statistics["W_STATISTICS"])
        end
        
        local AnimSet = game:GetService("ReplicatedStorage").animationSets.TPanimSets:FindFirstChild(WeaponStats["JBox"].animset)
        game.Workspace.ServerStuff.getTPWeapon:FireServer("JBox", AnimSet, "Fist", nil, false)
        repeat wait() until game.Players.LocalPlayer.Character:FindFirstChild("JBox")
        
        workspace.ServerStuff.dealDamage:FireServer("putjugsuit", nil, getrenv()._G.pseed[getrenv()._G.list[workspace.ServerStuff.ask:InvokeServer("mainHandler", true)]]);
        
        local music = game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart"):WaitForChild("speaker_music")
        
        workspace.ServerStuff.getTPWeapon:FireServer(nil, nil, nil, music, false)
    end
})

Toggles:AddButton({
    Name = "Equip Juggernaut armor (music)",
    Callback = function()
        if WeaponStats == nil and game.Workspace:FindFirstChild("ServerStuff") and game.Workspace.ServerStuff:FindFirstChild("Statistics") and game.Workspace.ServerStuff.Statistics:FindFirstChild("W_STATISTICS") then
            WeaponStats = require(game.Workspace.ServerStuff.Statistics["W_STATISTICS"])
        end
        
        local AnimSet = game:GetService("ReplicatedStorage").animationSets.TPanimSets:FindFirstChild(WeaponStats["JBox"].animset)
        game.Workspace.ServerStuff.getTPWeapon:FireServer("JBox", AnimSet, "Fist", nil, false)
        repeat wait() until game.Players.LocalPlayer.Character:FindFirstChild("JBox")
        
        workspace.ServerStuff.dealDamage:FireServer("putjugsuit", nil, getrenv()._G.pseed[getrenv()._G.list[workspace.ServerStuff.ask:InvokeServer("mainHandler", true)]]);
    end
})

Toggles:AddButton({
    Name = "Self Naked",
    Callback = function()
        if not game.Players.LocalPlayer.Backpack:FindFirstChild("mainHandler") then
            notify("SOF","Spawn in first! (Hub or main game)")
        else
            
        for i,v in ipairs(game.Players.LocalPlayer.Character:FindFirstChild("Outfit"):GetDescendants()) do
            if v.Name == "MeshPart" or v.Name == "decal" or v.Name == "Motor6D" or v.Name == "base" or v.Name == "part22" and v.Parent.Parent.Parent.Name == "Outfit" and v.Parent.Name ~= "Head" then
                workspace.ServerStuff.getTPWeapon:FireServer(nil, nil, nil, v, false)
            end
        end
        
        pcall(function()
            
        if game.Workspace.Camera:FindFirstChild("FPArms"):FindFirstChild("SkinParts"):FindFirstChild("LLowerArm"):FindFirstChild("MeshPart") then
            
            for i,v in pairs(game.Workspace.Camera:FindFirstChild("FPArms"):FindFirstChild("SkinParts"):GetDescendants()) do
                if v.Name == "MeshPart" then
                    v:Destroy()
                end
            end   
        
        end
            
        if game:GetService("Workspace").Camera.Bottom["Left Leg"]:FindFirstChild("MeshPart") or game:GetService("Workspace").Camera.Bottom["Right Leg"]:FindFirstChild("MeshPart") then
            for a = 0,2 do
                pcall(function()
                    game:GetService("Workspace").Camera.Bottom["Left Leg"].MeshPart:Destroy()
                    game:GetService("Workspace").Camera.Bottom["Right Leg"].MeshPart:Destroy()
                end)    
            end    
        end
        
        end)
        end
    end
})

Toggles:AddButton({
    Name = "Naked All",
    Callback = function()
        if not game.Players.LocalPlayer.Backpack:FindFirstChild("mainHandler") then
            notify("SOF","Spawn in first! (Hub or main game)")
        else        
        
            for i,v in ipairs(workspace:GetDescendants()) do
                if v.Name == "MeshPart" and v.Parent.Parent.Parent.Name == "Outfit" or v.Parent.Parent.Name == "Outfit" and v.Parent.Name ~= "Head" then
                    workspace.ServerStuff.getTPWeapon:FireServer(nil, nil, nil, v, false)
                end
            end       
        
        end
    end
})

Toggles:AddButton({
    Name = "Remove Gas",
    Callback = function()
        if game:GetService("Workspace").GamemodeStuff:FindFirstChild("outerGas") then
            workspace.ServerStuff.getTPWeapon:FireServer(nil, nil, nil, game:GetService("Workspace").GamemodeStuff.outerGas, false)
        else
            notify("SOF","Gas allready removed!")
        end    
    end
})

Toggles:AddToggle({
    Name = "Auto Remove Gas On Win",
    Default = _G.AutoGasRemoveOnWin,
    Save = true,
    Flag = "Auto Remove Gas On Win",
    Callback = function(shit)
    if shit then
        _G.AutoGasRemoveOnWin = true
    else
        _G.AutoGasRemoveOnWin = false
    end 
    spawn(function()    
        _G.AutoGasRemoveOnWin = true
        while _G.AutoGasRemoveOnWin do wait(0.5)
            if game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("cheer") and _G.AutoGasRemoveOnWin then
                if game:GetService("Workspace").GamemodeStuff:FindFirstChild("outerGas") and _G.AutoGasRemoveOnWin then
                    workspace.ServerStuff.getTPWeapon:FireServer(nil, nil, nil, game:GetService("Workspace").GamemodeStuff.outerGas, false)
                end
            end
        end  
    end)
end
})

Toggles:AddToggle({
    Name = "Semi Enviromental GodMode",
    Default = _G.EnviromentGodMode,
    Save = true,
    Flag = "Semi Enviromental GodMode",
    Callback = function(shit)
    if shit then
        _G.EnviromentGodMode = true
    else
        _G.EnviromentGodMode = false
    end 
end
})

local Graph = Misc:AddParagraph("Vomiting Players","")

function CheckVomited()
    local tempstring = ""
            
    tempstring = unpack(vomiting)
    for i,v in pairs(vomiting) do
        if tempstring == v then
        else    
            tempstring = tempstring.."   "..v
        end    
    end
            
    notify("SOF Vomiting Players",tempstring)
    Graph:Set(tempstring)
            
    tempstring = "" 
end  

Misc:AddTextbox({
	Name = "Vomit Screen Player",
	Default = "",
	TextDisappear = true,
	Callback = function(player)
        local item = playersearch(player)
        if item and game.Players:FindFirstChild(tostring(item)) and not table.find(vomiting, tostring(item)) then
            table.insert(vomiting, tostring(item))
            CheckVomited()
        else
            notify("SOF","Player Doesn't Exist!")
        end    
    end
})

Misc:AddTextbox({
	Name = "UnVomit Screen Player",
	Default = "",
	TextDisappear = true,
	Callback = function(player)
        if table.find(vomiting, playersearch(player)) then
            table.remove(vomiting, table.find(vomiting, playersearch(player)))
            CheckVomited()            
        elseif table.find(vomiting, tostring(player)) then
            table.remove(vomiting, table.find(vomiting, tostring(player)))
            CheckVomited()
        else
            notify("SOF","Player is not vomiting")
        end    
    end
})

Misc:AddButton({
    Name = "UnVomit All",
    Callback = function()
        vomiting = {}
        Graph:Set("")
        notify("SOF Vomiting Players","")
    end
})

Misc:AddButton({
    Name = "Vomit All",
    Callback = function()
        for i,v in pairs(game.Players:GetPlayers()) do
            if v and not table.find(vomiting, tostring(v)) then
                table.insert(vomiting, tostring(v))
            end
        end 
        CheckVomited()
    end
})

Misc:AddButton({
    Name = "Vomit Others",
    Callback = function()
        for i,v in pairs(game.Players:GetPlayers()) do
            if v and v ~= game.Players.LocalPlayer then
                table.insert(vomiting, tostring(v))
            end
        end 
        CheckVomited()
    end
})

Misc:AddButton({
    Name = "Open and detonate everything",
    Callback = function()
        for i,v in pairs(workspace.Interactables:GetChildren()) do
            if v.Name == "Locker" and v:FindFirstChild("Interact") then
                game:GetService("ReplicatedStorage").Interactables.interaction:FireServer(v, "locker", _G.Code)
            elseif v.Name == "Medical Cabinet" and v:FindFirstChild("Interact") then
                game:GetService("ReplicatedStorage").Interactables.interaction:FireServer(v, "medcab", _G.Code)
            elseif v.Name == "Pylon" and v:FindFirstChild("Interact") then
                game:GetService("ReplicatedStorage").Interactables.interaction:FireServer(v, "gaspylon", _G.Code)
            elseif v.Name == "Double Locker" and v:FindFirstChild("Interact") then
                game:GetService("ReplicatedStorage").Interactables.interaction:FireServer(v, "doublelocker", _G.Code)
            elseif v.Name == "S.A.N.C Barrel" then
                game:GetService("ReplicatedStorage").Interactables.interaction:FireServer(v, "sancbarrel", _G.Code)
                workspace.ServerStuff.detBarrel:FireServer(v)
            elseif v.Name == "Supply Crate" and v:FindFirstChild("Interact") then
                game:GetService("ReplicatedStorage").Interactables.interaction:FireServer(v, "supcrate", _G.Code)
            elseif v.Name == "Crate" and v:FindFirstChild("Interact") then
                game:GetService("ReplicatedStorage").Interactables.interaction:FireServer(v, "crate", _G.Code)
            elseif v.Name == "Barrel" then
                workspace.ServerStuff.detBarrel:FireServer(v)
            elseif v.Name == "Arsenal Locker" and v:FindFirstChild("Interact") then
                game:GetService("ReplicatedStorage").Interactables.interaction:FireServer(v, "arsenal", _G.Code)
            elseif v.Name == "Airdrop Pad" then
                game:GetService("ReplicatedStorage").Interactables.interaction:FireServer(v, "callairdrop", _G.Code)
            end
        end   
    end
})

Combat:AddToggle({
    Name = "One Shot",
    Default = _G.oneshot,
    Save = true,
    Flag = "One Shot",
    Callback = function(shit)
    if shit then
        _G.oneshot = true
    else
        _G.oneshot = false
    end 
end
})

Combat:AddToggle({
    Name = "BackStabs Only",
    Default = _G.backstab,
    Save = true,
    Flag = "BackStabs Only",
    Callback = function(shit)
    if shit then
        _G.backstab = true
    else
        _G.backstab = false
    end 
end
})

Combat:AddToggle({
    Name = "Kill Aura",
    Default = _G.KillAura,
    Save = true,
    Flag = "Kill Aura",
    Callback = function(shit)
    if shit then
        _G.KillAura = true
    else
        _G.KillAura = false
    end 
    spawn(function()  
        while _G.KillAura do wait(0.1)
        pcall(function()
        for i,v in pairs(game.Players:GetPlayers()) do
        
            local lp = game.Players.LocalPlayer
            local character = v.Character
            local charactername = v.Name
                
                if (lp.Character and lp.Character:FindFirstChild("Head") and character:FindFirstChild("Head") and v ~= game.Players.LocalPlayer) then
                    local mag = (v.Character.Head.Position - lp.Character.Head.Position).Magnitude
                          if mag < 15 and character:FindFirstChild("Humanoid").Health > 0 then
        
            local ohTable1 = {
            	[1] = "meleedamage",
            	[2] = character,
            	[3] = 33,
            	[4] = true,
            	[5] = "SHammer",
            	[6] = false,
            	[7] = false,
            	[8] = {
            		["rustic"] = true,
            		["leg"] = true,
            		["tough"] = true
            	}
            }
            local ohNil2 = nil
            local ohNumber3 = _G.Code
            
            workspace.ServerStuff.dealDamage:FireServer(ohTable1, ohNil2, ohNumber3)
        end
        end
        end
        end)
        end
    end)    
end
})

Combat:AddToggle({
    Name = "Auto Parry",
    Default = _G.AutoParry,
    Save = true,
    Flag = "Auto Parry",
    Callback = function(shit)
    if shit then
        _G.AutoParry = true
        task.wait()
        workspace.ServerStuff.initiateblock:FireServer(_G.Code, true)
    else
        _G.AutoParry = false
        task.wait()
        workspace.ServerStuff.initiateblock:FireServer(_G.Code, false)
    end 
    --spawn(function()
        --while _G.AutoParry do task.wait(0.05)
            --pcall(function()
               -- workspace.ServerStuff.initiateblock:FireServer(_G.Code, true)
            --end)
        --end
    --end)    
end
})

Combat:AddToggle({
    Name = "Anti Block",
    Default = _G.AntiBlock,
    Save = true,
    Flag = "Anti Block",
    Callback = function(shit)
    if shit then
        _G.AntiBlock = true
    else
        _G.AntiBlock = false
    end 
    spawn(function()  
        while _G.AntiBlock do wait(0.05)
            pcall(function()
                for i,v in pairs(game.Players:GetPlayers()) do
                    local lp = game.Players.LocalPlayer
                    local character = v.Character
                    local charactername = v.Name
                            
                    if (lp.Character and lp.Character:FindFirstChild("Head") and character:FindFirstChild("Head") and v ~= game.Players.LocalPlayer) then
                        local mag = (v.Character.Head.Position - lp.Character.Head.Position).Magnitude
                        if mag < 15 and character:FindFirstChild("Humanoid").Health > 0 and character:FindFirstChild("activeBlock").Value == true then
                            character:FindFirstChild("activeBlock").Value = false
                        end
                    end
                end
            end)
        end
    end)      
end
})

Combat:AddToggle({
    Name = "Auto Shove",
    Default = _G.AutoShove,
    Save = true,
    Flag = "Auto Shove",
    Callback = function(shit)
    if shit then
        _G.AutoShove = true
    else
        _G.AutoShove = false
    end 
    spawn(function()  
        while _G.AutoShove do wait(0.05)
        pcall(function()
        for i,v in pairs(game.Players:GetPlayers()) do
        
            local lp = game.Players.LocalPlayer
            local character = v.Character
            local charactername = v.Name
                
                if (lp.Character and lp.Character:FindFirstChild("Head") and character:FindFirstChild("Head") and v ~= game.Players.LocalPlayer) then
                    local mag = (v.Character.Head.Position - lp.Character.Head.Position).Magnitude
                          if mag < 15 and character:FindFirstChild("Humanoid").Health > 0 and character:FindFirstChild("activeBlock").Value == true then
                                        
        
            local ohTable1 = {
            	[1] = "meleedamage",
            	[2] = character,
            	[3] = "shove",
            	[4] = false,
            	[5] = "Fist",
            	[6] = false,
            	[7] = false,
            	[8] = {
            		["rustic"] = true,
            		["leg"] = true,
            		["tough"] = true
            	}
            }
            local ohNil2 = nil
            local ohNumber3 = _G.Code
            
            workspace.ServerStuff.dealDamage:FireServer(ohTable1, ohNil2, ohNumber3)
        end
        end
        end
        end)
        end
    end)    
end
})

function GetTarget()
    -- Variables
    local Distance = 50
    local Closest = false
    -- Go Through Players
    for _, A_1 in next, game.Players:GetPlayers() do
        local Char = A_1.Character
        -- Player Check
        if Char and A_1 ~= game.Players.LocalPlayer and Char:FindFirstChild("Head") and Char:FindFirstChild("Humanoid") and Char.Humanoid.Health > 0 and not Char:FindFirstChild("ForceField") then
                -- Distance Check
            local New_Distance = game.Players.LocalPlayer:DistanceFromCharacter(Char.Head.Position)
            if New_Distance < Distance then
                Distance = New_Distance
                Closest = Char
            end
        end
    end
    return Closest
end

Toggles:AddToggle({
    Name = "Hidden Noises On Nearbys",
    Default = _G.HiddenNoises,
    Save = true,
    Flag = "Hidden Noises On Nearbys",
    Callback = function(shit)
    if shit then
        _G.HiddenNoises = true
    else
        _G.HiddenNoises = false
    end 
    spawn(function()  
        while _G.HiddenNoises do wait(10)
        pcall(function()
        local target = GetTarget()
        if target then
            local ass = {"taunt1","taunt2","taunt3","taunt4","taunt5"}
            local ohTable1 = {
                [1] = "events", -- folder name
                [2] = "hiddenB",
            }
            _G.ohString2 = ass[math.random(#ass)] -- audio
            local Stringy = _G.ohString2
            local ohInstance3 = target.HumanoidRootPart
            for i = 0,1 do            
                workspace.ServerStuff.playAudio:FireServer(ohTable1, Stringy, ohInstance3)
            end    
        end
        end)
        end
    end)    
end
})

Toggles:AddToggle({
    Name = "Alarm On Nearbys",
    Default = _G.AlarmNoise,
    Save = true,
    Flag = "Alarm On Nearbys",
    Callback = function(shit)
    if shit then
        _G.AlarmNoise = true
    else
        _G.AlarmNoise = false
    end 
    spawn(function()  
        while _G.AlarmNoise do wait(1)
        pcall(function()
        local target = GetTarget()
        if target and not target:FindFirstChild("beacon") then
            local ohTable1 = {
                [1] = "weapons", -- folder name
                [2] = "ALM",
            }
            local Stringy = "beacon"
            local ohInstance3 = target.HumanoidRootPart
            for i = 0,2 do            
                workspace.ServerStuff.playAudio:FireServer(ohTable1, Stringy, ohInstance3)
            end   
        end
        end)
        end
    end)    
end
})

Toggles:AddToggle({
    Name = "Tase Nearby",
    Default = _G.TaseNearby,
    Save = true,
    Flag = "Tase Nearby",
    Callback = function(shit)
    if shit then
        _G.TaseNearby = true
    else
        _G.TaseNearby = false
    end 
    spawn(function()  
        while _G.TaseNearby do wait(0.1)
        pcall(function()
        for i,v in pairs(game.Players:GetPlayers()) do
        
            local lp = game.Players.LocalPlayer
            local character = v.Character
            local charactername = v.Name
                
            if (lp.Character and lp.Character:FindFirstChild("Head") and character:FindFirstChild("Head") and v ~= game.Players.LocalPlayer) then
                local mag = (v.Character.Head.Position - lp.Character.Head.Position).Magnitude
                if mag < 25 and character:FindFirstChild("Humanoid").Health > 0 and not character:FindFirstChild("Head"):FindFirstChild("vomitBlock") then
                    local ohTable1 = {
                        [1] = "meleedamage",
                        [2] = character,
                        [3] = "taser",
                        [4] = false,
                        [5] = "Taser",
                        [6] = false,
                        [7] = false,
                        [8] = {}
                    }
                    local ohNil2 = nil
                    local ohNumber3 = _G.Code
                            
                    workspace.ServerStuff.dealDamage:FireServer(ohTable1, ohNil2, ohNumber3) 
                end
            end
        end
        end)
        end
    end)    
end
})

Spawn:AddParagraph("Stuff before use","This will put you're melee in the second slot so you dont have to drop primary (it will break sometimes and its not fixable) also names go by their ids")

Spawn:AddTextbox({
	Name = "Melee",
	Default = "",
	TextDisappear = true,
	Callback = function(Item)
        local item = itemsearch(Item)
        if item and game.ReplicatedStorage.Weapons:FindFirstChild(tostring(item)) then
            _G.Melee = item
        else
            notify("SOF","Item Doesn't Exist!")
        end    
    end
})

Spawn:AddTextbox({
	Name = "Item 2",
	Default = "",
	TextDisappear = true,
	Callback = function(Item)
        local item = itemsearch(Item)
        if item and game.ReplicatedStorage.Weapons:FindFirstChild(tostring(item)) then
            _G.Item2 = item
        else
            notify("SOF","Item Doesn't Exist!")
        end    
    end
})

Spawn:AddTextbox({
	Name = "Item 3",
	Default = "",
	TextDisappear = true,
	Callback = function(Item)
        local item = itemsearch(Item)
        if item and game.ReplicatedStorage.Weapons:FindFirstChild(tostring(item)) then
            _G.Item3 = item
        else
            notify("SOF","Item Doesn't Exist!")
        end    
    end
})

Spawn:AddTextbox({
	Name = "Item 4",
	Default = "",
	TextDisappear = true,
	Callback = function(Item)
        local item = itemsearch(Item)
        if item and game.ReplicatedStorage.Weapons:FindFirstChild(tostring(item)) then
            _G.Item4 = item
        else
            notify("SOF","Item Doesn't Exist!")
        end    
    end
})

Spawn:AddTextbox({
	Name = "Item 5",
	Default = "",
	TextDisappear = true,
	Callback = function(Item)
        local item = itemsearch(Item)
        if item and game.ReplicatedStorage.Weapons:FindFirstChild(tostring(item)) then
            _G.Item5 = item
        else
            notify("SOF","Item Doesn't Exist!")
        end    
    end
})

Spawn:AddTextbox({
	Name = "Item 2 Ammo",
	Default = "",
	TextDisappear = true,
	Callback = function(Value)
        local value = Value
        if value and tonumber(value) then
            _G.Item2Ammo = value
        else
            notify("SOF","Not a number!")
        end    
    end
})

Spawn:AddTextbox({
	Name = "Item 3 Ammo",
	Default = "",
	TextDisappear = true,
	Callback = function(Value)
        local value = Value
        if value and tonumber(value) then
            _G.Item3Ammo = value
        else
            notify("SOF","Not a number!")
        end    
    end
})

Spawn:AddTextbox({
	Name = "Item 4 Ammo",
	Default = "",
	TextDisappear = true,
	Callback = function(Value)
        local value = Value
        if value and tonumber(value) then
            _G.Item4Ammo = value
        else
            notify("SOF","Not a number!")
        end    
    end
})

Spawn:AddTextbox({
	Name = "Item 5 Ammo",
	Default = "",
	TextDisappear = true,
	Callback = function(Value)
        local value = Value
        if value and tonumber(value) then
            _G.Item5Ammo = value
        else
            notify("SOF","Not a number!")
        end    
    end
})

Spawn:AddButton({
    Name = "Spawn items",
    Callback = function()
        if not game.Players.LocalPlayer.Backpack:FindFirstChild("mainHandler") then
            notify("SOF","Spawn in first! (Hub or main game)")
        else        
            if game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("mainHUD"):FindFirstChild("InventoryFrame"):FindFirstChild("slot1"):FindFirstChild("icon").Image ~= "rbxassetid://2195005475" then
                local message = Instance.new("Message",workspace)
                message.Text = "Drop your primary then Spawn items again!"
                task.wait(5)
                message:Destroy()
            else  
                local TempEnv = getsenv(game.Players.LocalPlayer.Backpack.mainHandler)
                local TempUpValues = getupvalues(TempEnv.convertToShadow)
                if WeaponStats == nil and game.Workspace:FindFirstChild("ServerStuff") and game.Workspace.ServerStuff:FindFirstChild("Statistics") and game.Workspace.ServerStuff.Statistics:FindFirstChild("W_STATISTICS") then
                    WeaponStats = require(game.Workspace.ServerStuff.Statistics["W_STATISTICS"])
                end
                
                for i,v in pairs(TempUpValues) do
                    if typeof(v) == "table" and v[1] ~= nil and typeof(v[1]) == "table" and v[1][1] == "Fist" then
                        
                        v[1] = {"Fist", false, nil}
                        v[2] = {"Fist", false, nil}
                        v[3] = {"Fist", false, nil}
                        v[4] = {"Fist", false, nil}
                        v[5] = {"Fist", false, nil}
                        v[6] = {"Fist", false, nil} 
                        
                        v[2] = {_G.Melee, false, nil}
                        v[3] = {_G.Item2, false, _G.Item2Ammo}
                        v[4] = {_G.Item3, false, _G.Item3Ammo}
                        v[5] = {_G.Item4, false, _G.Item4Ammo}
                        v[6] = {_G.Item5, false, _G.Item5Ammo}
                        local AnimSet = game:GetService("ReplicatedStorage").animationSets.TPanimSets:FindFirstChild(WeaponStats[_G.Melee].animset)
                        game.Workspace.ServerStuff.getTPWeapon:FireServer(_G.Melee, AnimSet, "Fist")
                        local NewModel = game.Players.LocalPlayer.Character:WaitForChild(_G.Melee,10)
                        if NewModel == nil then
                            return
                        end
                        game.Workspace.ServerStuff.getTPWeapon:FireServer(_G.Melee, AnimSet, "Fist", NewModel, true)        
                    end
                end
            end
        end
    end
})

Spawn:AddButton({
    Name = "Randomized inventory",
    Callback = function()
local Melees = {"PAxe","TSpear","HBerd","PBaton","CCleaver","FPan","Rake","CMMaul","EMSword","SHammer","GSword","ESword","CKnife","THawk","PKnife","MMachete","FAxe","SAxe","BadBat","BBat","PFork","LPipe","Shovel","CHammer","KaramB","HKnife","GhostKnife","RBHammer","PLBlade","SSword","PCutter","SCKnife","EFlag","CFlag","Yari","DMusket","MilAxe","MFork","TJavelin","NSword","RPier","CRCudgel"}
local Items = {"BPack","Taser","DStim","HStim","DEFStim","SStim","SPDStim","SPCStim","Flare","PSpray","Dynamite","TCaltrop","AdrStim","TGas","Rifle","RVolver","Pistol","SubMG","FAid","ImpN","PMine","TStim","BInjector","SLauncher","PTrap","MAid","DBarre","Glock","CRNade","RExplosive","APack","SPShotgun","SSnare","HRifle","RBow","CRBranch","CRStone","CRBandage","CRCaltrop","CRBow","CRBPack","CRPTrap","CRSBomb","PScanner","MPistol","CRPavise","AlrGun","EFlare","CRQuiver","VAlrGun","SubAK","Deagle","AMR","CPBow","GhostBomb","SubVector","SubLMG","EBR","Mac","ASVal","LSMini","CRRiggedE","JBox"}

local TempEnv = getsenv(game.Players.LocalPlayer.Backpack.mainHandler)
local TempUpValues = getupvalues(TempEnv.convertToShadow)
if WeaponStats == nil and game.Workspace:FindFirstChild("ServerStuff") and game.Workspace.ServerStuff:FindFirstChild("Statistics") and game.Workspace.ServerStuff.Statistics:FindFirstChild("W_STATISTICS") then
    WeaponStats = require(game.Workspace.ServerStuff.Statistics["W_STATISTICS"])
end

local meleeYouWant = ""..Melees[math.random(#Melees)]..""
local item2 = ""..Items[math.random(#Items)].."" 
local item3 = ""..Items[math.random(#Items)].."" 
local item4 = ""..Items[math.random(#Items)].."" 
local item5 = ""..Items[math.random(#Items)].."" 

local item2Ammo = 1
local item3Ammo = 1
local item4Ammo = 1
local item5Ammo = 1

if game.ReplicatedStorage:FindFirstChild("Weapons"):FindFirstChild(item2) and game.ReplicatedStorage:FindFirstChild("Weapons"):FindFirstChild(item2):FindFirstChild("ammo") then
    item2Ammo = game.ReplicatedStorage:FindFirstChild("Weapons"):FindFirstChild(item2):FindFirstChild("ammo").Value
else
    item2Ammo = 1
end 

if game.ReplicatedStorage:FindFirstChild("Weapons"):FindFirstChild(item3) and game.ReplicatedStorage:FindFirstChild("Weapons"):FindFirstChild(item3):FindFirstChild("ammo") then
    item3Ammo = game.ReplicatedStorage:FindFirstChild("Weapons"):FindFirstChild(item3):FindFirstChild("ammo").Value
else
    item3Ammo = 1
end

if game.ReplicatedStorage:FindFirstChild("Weapons"):FindFirstChild(item4) and game.ReplicatedStorage:FindFirstChild("Weapons"):FindFirstChild(item4):FindFirstChild("ammo") then
    item4Ammo = game.ReplicatedStorage:FindFirstChild("Weapons"):FindFirstChild(item4):FindFirstChild("ammo").Value
else
    item4Ammo = 1
end

if game.ReplicatedStorage:FindFirstChild("Weapons"):FindFirstChild(item5) and game.ReplicatedStorage:FindFirstChild("Weapons"):FindFirstChild(item5):FindFirstChild("ammo") then
    item5Ammo = game.ReplicatedStorage:FindFirstChild("Weapons"):FindFirstChild(item5):FindFirstChild("ammo").Value
else
    item5Ammo = 1
end

if game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("mainHUD"):FindFirstChild("InventoryFrame"):FindFirstChild("slot1"):FindFirstChild("icon").Image ~= "rbxassetid://2195005475" then
    local message = Instance.new("Message",workspace)
    message.Text = "Drop your primary then execute again!"
    task.wait(5)
    message:Destroy()
else    

for i,v in pairs(TempUpValues) do
    if typeof(v) == "table" and v[1] ~= nil and typeof(v[1]) == "table" and v[1][1] == "Fist" then
        
            v[1] = {"Fist", false, nil}
            v[2] = {"Fist", false, nil}
            v[3] = {"Fist", false, nil}
            v[4] = {"Fist", false, nil}
            v[5] = {"Fist", false, nil}
            v[6] = {"Fist", false, nil} 
            v[2] = {meleeYouWant, false, nil}
            
        v[3] = {item2, false, item2Ammo}
        v[4] = {item3, false, item3Ammo}
        v[5] = {item4, false, item4Ammo}
        v[6] = {item5, false, item5Ammo}
        local AnimSet = game:GetService("ReplicatedStorage").animationSets.TPanimSets:FindFirstChild(WeaponStats[meleeYouWant].animset)
        game.Workspace.ServerStuff.getTPWeapon:FireServer(meleeYouWant, AnimSet, "Fist")
        local NewModel = game.Players.LocalPlayer.Character:WaitForChild(meleeYouWant,10)
        if NewModel == nil then
            return
        end
        game.Workspace.ServerStuff.getTPWeapon:FireServer(meleeYouWant, AnimSet, "Fist", NewModel, true)
    end
end

end
    end
})

function Spawn(Cords)
    NewRespawn()
    repeat task.wait() until not game.Players.LocalPlayer.Character:FindFirstChild("Outfit")
    Hub()
    Start("Normal")
    repeat task.wait() until game.Players.LocalPlayer.Character:FindFirstChild("Outfit")
    if Cords == "Match" then
        game.Players.LocalPlayer.start.Value = ""
        game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame = CFrame.new(18.777990341186523, -2.5860984325408936, -9.264251708984375)
    elseif Cords == "HubA" then
        game.Players.LocalPlayer.start.Value = "hubbing"
        game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame = CFrame.new(-118.72508239746094, -22.03114128112793, 1088.935546875)
    elseif Cords == "Respawn" then
        game.Players.LocalPlayer.start.Value = ""
        NewRespawn()
    elseif Cords == "HubB" then
        game.Players.LocalPlayer.start.Value = ""
        game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame = CFrame.new(-118.72508239746094, -22.03114128112793, 1088.935546875)
    end
end

Match:AddButton({
    Name = "Fix Character",
    Callback = function()
        Spawn("Respawn")
    end
})

Match:AddButton({
    Name = "Spawn in match",
    Callback = function()
        Spawn("Match")
    end
})

Match:AddButton({
    Name = "Hub (PVP enabled)",
    Callback = function()
        Spawn("HubB")
    end
})

Match:AddButton({
    Name = "Hub (PVP disabled)",
    Callback = function()
        Spawn("HubA")
    end
})

spawn(function()
if not _G.AllreadyNameCalled then
_G.AllreadyNameCalled = true

-- oneshot namecall

local mt = getrawmetatable(game)
make_writeable(mt)

local namecall = mt.__namecall
mt.__namecall = newcclosure(function(self, ...)
    local method = getnamecallmethod()
    local args = {...}

    if method == "FireServer" and tostring(self) == "dealDamage" then
        if args[1][1] == "meleedamage" and args[1][3] ~= "shove" then
            if _G.oneshot then
                args[1][3] = 33
                args[1][4] = true
                args[1][5] = "SHammer"
                for oneshot = 0,50 do
                    self.FireServer(self, unpack(args))
                end 
            end    
        end
    end
    return namecall(self, table.unpack(args))
end)

-- backstab only namecall

local mt = getrawmetatable(game)
make_writeable(mt)

local namecall = mt.__namecall
mt.__namecall = newcclosure(function(self, ...)
    local method = getnamecallmethod()
    local args = {...}

    if method == "FireServer" and tostring(self) == "dealDamage" then
        if args[1][1] == "meleedamage" and args[1][3] ~= "shove" then
            if _G.backstab then
                args[1][4] = true
            end    
        end
    end
    return namecall(self, table.unpack(args))
end)

-- enviroment godmode namecall

local mt = getrawmetatable(game)
make_writeable(mt)

local namecall = mt.__namecall
mt.__namecall = newcclosure(function(self, ...)
    local method = getnamecallmethod()
    local args = {...}

    if method == "FireServer" and tostring(self) == "dealDamage" then
        if args[1] == 'toxicated' or args[1] == 'bleed' then
            if _G.EnviromentGodMode then
                return
            end    
        end
    end
    return namecall(self, table.unpack(args))
end)

-- AutoParry namecall

local mt = getrawmetatable(game)
make_writeable(mt)

local namecall = mt.__namecall
mt.__namecall = newcclosure(function(self, ...)
    local method = getnamecallmethod()
    local args = {...}

    if method == "FireServer" and tostring(self) == "initiateblock" then
        if args[2] ~= true then
            if _G.AutoParry then
                args[2] = true
            end    
        end
    end
    return namecall(self, table.unpack(args))
end)

end

end)

end)
